#!/usr/bin/env node

/**
 * Script de configuration automatique de la base de donn√©es
 * Ce script configure automatiquement Supabase ou localStorage selon la disponibilit√©
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

console.log('üöÄ CONFIGURATION AUTOMATIQUE DE LA BASE DE DONN√âES');
console.log('='.repeat(60));

async function setupDatabase() {
  // V√©rifier si Supabase est configur√©
  if (!supabaseUrl || !supabaseAnonKey) {
    console.log('‚ö†Ô∏è Variables Supabase non configur√©es');
    console.log('üìù Configuration en mode localStorage uniquement...');
    await setupLocalStorageMode();
    return;
  }

  console.log('üîç Test de connexion Supabase...');
  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  try {
    const { error } = await supabase.from('users').select('count').limit(1);
    
    if (error) {
      console.log('‚ùå Supabase non accessible:', error.message);
      console.log('üìã Instructions pour configurer Supabase:');
      console.log('1. Allez sur https://supabase.com/dashboard');
      console.log('2. S√©lectionnez votre projet');
      console.log('3. Allez dans SQL Editor');
      console.log('4. Copiez et ex√©cutez le contenu de: supabase/migrations/create_complete_schema.sql');
      console.log('5. Red√©marrez l\'application');
      
      await setupLocalStorageMode();
      return;
    }

    console.log('‚úÖ Supabase connect√© avec succ√®s');
    await setupSupabaseMode();
    
  } catch (error) {
    console.log('‚ùå Erreur de connexion Supabase:', error.message);
    await setupLocalStorageMode();
  }
}

async function setupSupabaseMode() {
  console.log('\nüåç CONFIGURATION MODE SUPABASE');
  console.log('-'.repeat(40));
  
  console.log('‚úÖ Base de donn√©es: Supabase (cloud)');
  console.log('‚úÖ Synchronisation: Automatique');
  console.log('‚úÖ Accessibilit√©: Globale (tous appareils)');
  console.log('‚úÖ Sauvegarde: Automatique dans le cloud');
  
  // Cr√©er un fichier de configuration
  const config = {
    database: 'supabase',
    url: process.env.VITE_SUPABASE_URL,
    features: {
      globalSync: true,
      cloudBackup: true,
      multiDevice: true,
      realtime: true
    },
    setupDate: new Date().toISOString()
  };
  
  fs.writeFileSync('database-config.json', JSON.stringify(config, null, 2));
  console.log('üìÑ Configuration sauvegard√©e dans database-config.json');
}

async function setupLocalStorageMode() {
  console.log('\nüíæ CONFIGURATION MODE LOCALSTORAGE');
  console.log('-'.repeat(40));
  
  console.log('‚úÖ Base de donn√©es: localStorage (local)');
  console.log('‚ö†Ô∏è Synchronisation: Locale uniquement');
  console.log('‚ö†Ô∏è Accessibilit√©: Cet appareil uniquement');
  console.log('‚ö†Ô∏è Sauvegarde: Manuelle recommand√©e');
  
  // Cr√©er un fichier de configuration
  const config = {
    database: 'localStorage',
    features: {
      globalSync: false,
      cloudBackup: false,
      multiDevice: false,
      realtime: false
    },
    setupDate: new Date().toISOString(),
    recommendations: [
      'Configurez Supabase pour un acc√®s global',
      'Sauvegardez r√©guli√®rement vos donn√©es',
      'Utilisez l\'export/import pour transf√©rer les donn√©es'
    ]
  };
  
  fs.writeFileSync('database-config.json', JSON.stringify(config, null, 2));
  console.log('üìÑ Configuration sauvegard√©e dans database-config.json');
  
  // Initialiser localStorage avec des donn√©es de base
  console.log('üîß Initialisation localStorage...');
  
  const defaultAdmin = {
    id: '550e8400-e29b-41d4-a716-446655440000',
    email: 'abdoulaye.niang@cdp.sn',
    name: 'Abdoulaye Niang',
    role: 'admin',
    permissions: {
      canCreateMissions: true,
      canEditMissions: true,
      canDeleteMissions: true,
      canViewAllMissions: true,
      canImportMissions: true,
      canManageUsers: true,
      canViewReports: true,
      canEditReports: true,
      canManageDocuments: true,
      canChangeStatus: true,
      canViewDebug: true
    },
    created_at: new Date().toISOString(),
    isActive: true,
    department: 'Direction',
    phone: '',
    password: 'UGFzc2Vy' // 'Passer' encod√© en base64
  };
  
  // Cr√©er le script d'initialisation localStorage
  const initScript = `
// Script d'initialisation localStorage pour CDP Missions
console.log('üîß Initialisation localStorage...');

// Cr√©er l'admin par d√©faut
const admin = ${JSON.stringify(defaultAdmin, null, 2)};

// Sauvegarder dans localStorage
localStorage.setItem('cdp_users', JSON.stringify([admin]));
localStorage.setItem('cdp_missions', JSON.stringify([]));

console.log('‚úÖ localStorage initialis√© avec admin par d√©faut');
console.log('üìß Email: abdoulaye.niang@cdp.sn');
console.log('üîë Mot de passe: Passer');
`;

  fs.writeFileSync('scripts/init-localStorage.js', initScript);
  console.log('üìÑ Script d\'initialisation cr√©√©: scripts/init-localStorage.js');
}

// Ex√©cuter la configuration
setupDatabase()
  .then(() => {
    console.log('\n' + '='.repeat(60));
    console.log('üéâ CONFIGURATION TERMIN√âE AVEC SUCC√àS');
    console.log('='.repeat(60));
    
    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. D√©marrez l\'application: npm run dev');
    console.log('2. Connectez-vous avec: abdoulaye.niang@cdp.sn / Passer');
    console.log('3. Testez les fonctionnalit√©s de base');
    console.log('4. Consultez database-config.json pour voir la configuration');
    
    console.log('\n‚úÖ L\'application est pr√™te √† √™tre utilis√©e !');
  })
  .catch(error => {
    console.error('‚ùå Erreur lors de la configuration:', error);
    process.exit(1);
  });