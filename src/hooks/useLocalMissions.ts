import { useState, useEffect } from 'react';
import { Mission } from '../types/mission';
import { db } from '../database/localStorageDb';

export const useLocalMissions = () => {
  const [missions, setMissions] = useState<Mission[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchMissions = async () => {
    try {
      console.log('üìã useLocalMissions: R√©cup√©ration des missions...');
      setLoading(true);
      setError(null);
      
      const result = await db.getAllMissions();
      console.log(`‚úÖ useLocalMissions: ${result.length} missions r√©cup√©r√©es`);
      
      setMissions(result);
    } catch (err) {
      console.error('‚ùå useLocalMissions: Erreur lors de la r√©cup√©ration des missions:', err);
      setError('Erreur lors de la r√©cup√©ration des missions depuis la base de donn√©es');
      setMissions([]); // S'assurer qu'on a un tableau vide en cas d'erreur
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchMissions();
  }, []);

  const refreshMissions = async () => {
    try {
      console.log('üîÑ useLocalMissions: Rafra√Æchissement des missions...');
      setLoading(true);
      setError(null);
      
      const allMissions = await db.getAllMissions();
      console.log('‚úÖ useLocalMissions: Missions apr√®s rafra√Æchissement:', allMissions.length);
      
      setMissions(allMissions);
    } catch (err) {
      console.error('‚ùå useLocalMissions: Erreur lors du rafra√Æchissement des missions:', err);
      setError('Erreur lors du chargement des missions');
      setMissions([]);
    } finally {
      setLoading(false);
    }
  };

  const addMission = async (missionData: Omit<Mission, 'id'>) => {
    try {
      console.log('‚ûï useLocalMissions: Ajout d\'une nouvelle mission:', missionData.title);
      setLoading(true);
      setError(null);
      
      const newMission = await db.addMission(missionData);
      console.log('‚úÖ useLocalMissions: Mission ajout√©e avec succ√®s:', newMission.reference);
      
      await refreshMissions();
      return newMission;
    } catch (err) {
      console.error('‚ùå useLocalMissions: Erreur lors de l\'ajout de la mission:', err);
      setError('Erreur lors de l\'ajout de la mission');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  const updateMissionStatuses = async () => {
    try {
      console.log('üîÑ useLocalMissions: Mise √† jour des statuts...');
      setLoading(true);
      
      const result = await db.updateMissionStatuses();
      console.log('‚úÖ useLocalMissions: Statuts mis √† jour:', result);
      
      await refreshMissions();
      return result;
    } catch (err) {
      console.error('‚ùå useLocalMissions: Erreur lors de la mise √† jour des statuts:', err);
      setError('Erreur lors de la mise √† jour des statuts');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  const checkUpcomingStatusChanges = async () => {
    try {
      console.log('üîç useLocalMissions: V√©rification des changements √† venir...');
      const result = await db.checkUpcomingStatusChanges();
      console.log('‚úÖ useLocalMissions: Changements √† venir:', result);
      return result;
    } catch (err) {
      console.error('‚ùå useLocalMissions: Erreur lors de la v√©rification des changements de statut:', err);
      return { startingSoon: [], endingSoon: [] };
    }
  };

  return { 
    missions, 
    loading, 
    error, 
    refreshMissions, 
    addMission, 
    updateMissionStatuses, 
    checkUpcomingStatusChanges 
  };
};